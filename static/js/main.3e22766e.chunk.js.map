{"version":3,"sources":["Components/LigthSaber/LigthSaber.js","App.js","serviceWorker.js","index.js"],"names":["SaberCmp","on","handlerClick","className","onClick","LightSaber","useState","ligthOn","setLigthOn","App","id","src","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sQAYMA,G,MAAW,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,GAAIC,EAAmB,EAAnBA,aACtB,OACE,yBAAKC,UAAU,kBAAkBC,QAASF,GACxC,yBAAKC,UAAU,iBACf,yBAAKA,UAAU,gBACf,yBAAKA,UAAU,YACf,yBAAKA,UAAU,YACf,yBAAKA,UAAU,YACf,yBAAKA,UAAU,YACf,yBAAKA,UAAU,YACf,yBAAKA,UAAU,YACf,yBAAKA,UAAU,YACf,yBAAKA,UAAU,aACf,yBAAKA,UAAU,YACf,yBAAKA,UAAU,aACf,yBAAKA,UAAU,YACf,yBAAKA,UAAU,aACf,yBAAKA,UAAU,YACf,yBAAKA,UAAU,YACf,yBAAKA,UAAU,aACf,yBAAKA,UAAU,YACf,yBAAKA,UAAU,aACf,yBAAKA,UAAU,YACf,yBAAKA,UAAU,YACf,yBAAKA,UAAU,YACf,yBAAKA,UAAU,YACf,yBAAKA,UAAU,YACf,yBAAKA,UAAU,YACf,yBAAKA,UAAU,YACf,yBAAKA,UAAU,WACf,yBAAKA,UAAU,YACf,yBAAKA,UAAU,aACf,yBAAKA,UAAU,YACf,yBAAKA,UAAU,YACf,yBAAKA,UAAU,YACf,yBAAKA,UAAU,YACf,yBAAKA,UAAS,gBAAWF,EAAK,UAAY,iBAKjCI,EAlDI,WAAO,IAAD,EACOC,oBAAS,GADhB,mBAChBC,EADgB,KACPC,EADO,KAEvB,OACE,yBAAKL,UAAU,aACb,kBAAC,EAAD,CAAUF,GAAIM,EAASL,aAAc,kBAAMM,GAAYD,Q,MCU9CE,MAbf,WACE,OACE,yBAAKN,UAAU,OACb,kBAAC,EAAD,MACA,2BAAOO,GAAG,WACR,4BAAQC,IAAI,yCACZ,4BAAQA,IAAI,yCACZ,4BAAQA,IAAI,4CCCAC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.3e22766e.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport \"./LigthSaber.scss\";\r\n\r\nconst LightSaber = () => {\r\n  const [ligthOn, setLigthOn] = useState(false);\r\n  return (\r\n    <div className=\"container\">\r\n      <SaberCmp on={ligthOn} handlerClick={() => setLigthOn(!ligthOn)} />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst SaberCmp = ({ on, handlerClick }) => {\r\n  return (\r\n    <div className=\"saber-container\" onClick={handlerClick}>\r\n      <div className=\"top-tr-black\"></div>\r\n      <div className=\"top-tr-gray\"></div>\r\n      <div className=\"t-sq-b1\"></div>\r\n      <div className=\"t-sq-g1\"></div>\r\n      <div className=\"t-sq-b2\"></div>\r\n      <div className=\"t-sq-g2\"></div>\r\n      <div className=\"t-sq-b3\"></div>\r\n      <div className=\"t-tg-w1\"></div>\r\n      <div className=\"t-sq-w1\"></div>\r\n      <div className=\"t-sq-wg1\"></div>\r\n      <div className=\"m-tg-b1\"></div>\r\n      <div className=\"m-sq-wg1\"></div>\r\n      <div className=\"m-sq-w1\"></div>\r\n      <div className=\"m-sq-wg2\"></div>\r\n      <div className=\"c-sq-r1\"></div>\r\n      <div className=\"c-sq-r2\"></div>\r\n      <div className=\"m-sq-wg3\"></div>\r\n      <div className=\"m-sq-w2\"></div>\r\n      <div className=\"m-sq-wg4\"></div>\r\n      <div className=\"m-sq-b3\"></div>\r\n      <div className=\"m-sq-b1\"></div>\r\n      <div className=\"m-sq-g1\"></div>\r\n      <div className=\"m-hd-b1\"></div>\r\n      <div className=\"m-hd-b2\"></div>\r\n      <div className=\"m-hd-b3\"></div>\r\n      <div className=\"m-sq-b2\"></div>\r\n      <div className=\"m-c-b1\"></div>\r\n      <div className=\"b-sq-w1\"></div>\r\n      <div className=\"b-sq-wg1\"></div>\r\n      <div className=\"b-sq-g1\"></div>\r\n      <div className=\"b-sq-g2\"></div>\r\n      <div className=\"b-sq-g3\"></div>\r\n      <div className=\"b-sq-g4\"></div>\r\n      <div className={`ligth ${on ? \"ligthOn\" : \"ligthOff\"}`}></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LightSaber;\r\n","import React from \"react\";\nimport LightSaber from \"./Components/LigthSaber/LigthSaber\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <LightSaber></LightSaber>\n      <audio id=\"saberOn\">\n        <source src=\"http://edbond.name/other/SaberOn.mp3\"></source>\n        <source src=\"http://edbond.name/other/SaberOn.ogg\"></source>\n        <source src=\"http://edbond.name/other/SaberOn.wav\"></source>\n      </audio>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}